{"ast":null,"code":"import _toConsumableArray from \"/home/steve/Desktop/Instalily/partselect-chat-agent-sbaek/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/**\n * @import {\n *   Create,\n *   FullNormalizedExtension,\n *   InitialConstruct,\n *   ParseContext,\n *   ParseOptions\n * } from 'micromark-util-types'\n */\n\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { string, text } from './initialize/text.js';\nimport * as defaultConstructs from './constructs.js';\nimport { createTokenizer } from './create-tokenizer.js';\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ParseContext}\n *   Parser.\n */\nexport function parse(options) {\n  var settings = options || {};\n  var constructs = /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs].concat(_toConsumableArray(settings.extensions || [])));\n\n  /** @type {ParseContext} */\n  var parser = {\n    constructs: constructs,\n    content: create(content),\n    defined: [],\n    document: create(document),\n    flow: create(flow),\n    lazy: {},\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  /**\n   * @param {InitialConstruct} initial\n   *   Construct to start with.\n   * @returns {Create}\n   *   Create a tokenizer.\n   */\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","map":{"version":3,"names":["combineExtensions","content","document","flow","string","text","defaultConstructs","createTokenizer","parse","options","settings","constructs","concat","_toConsumableArray","extensions","parser","create","defined","lazy","initial","creator","from"],"sources":["/home/steve/Desktop/Instalily/partselect-chat-agent-sbaek/node_modules/micromark/lib/parse.js"],"sourcesContent":["/**\n * @import {\n *   Create,\n *   FullNormalizedExtension,\n *   InitialConstruct,\n *   ParseContext,\n *   ParseOptions\n * } from 'micromark-util-types'\n */\n\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { string, text } from './initialize/text.js';\nimport * as defaultConstructs from './constructs.js';\nimport { createTokenizer } from './create-tokenizer.js';\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ParseContext}\n *   Parser.\n */\nexport function parse(options) {\n  const settings = options || {};\n  const constructs = /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\n\n  /** @type {ParseContext} */\n  const parser = {\n    constructs,\n    content: create(content),\n    defined: [],\n    document: create(document),\n    flow: create(flow),\n    lazy: {},\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  /**\n   * @param {InitialConstruct} initial\n   *   Construct to start with.\n   * @returns {Create}\n   *   Create a tokenizer.\n   */\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,iBAAiB,QAAQ,mCAAmC;AACrE,SAASC,OAAO,QAAQ,yBAAyB;AACjD,SAASC,QAAQ,QAAQ,0BAA0B;AACnD,SAASC,IAAI,QAAQ,sBAAsB;AAC3C,SAASC,MAAM,EAAEC,IAAI,QAAQ,sBAAsB;AACnD,OAAO,KAAKC,iBAAiB,MAAM,iBAAiB;AACpD,SAASC,eAAe,QAAQ,uBAAuB;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,KAAKA,CAACC,OAAO,EAAE;EAC7B,IAAMC,QAAQ,GAAGD,OAAO,IAAI,CAAC,CAAC;EAC9B,IAAME,UAAU,GAAG;EACnBX,iBAAiB,EAAEM,iBAAiB,EAAAM,MAAA,CAAAC,kBAAA,CAAMH,QAAQ,CAACI,UAAU,IAAI,EAAE,EAAE,CAAC;;EAEtE;EACA,IAAMC,MAAM,GAAG;IACbJ,UAAU,EAAVA,UAAU;IACVV,OAAO,EAAEe,MAAM,CAACf,OAAO,CAAC;IACxBgB,OAAO,EAAE,EAAE;IACXf,QAAQ,EAAEc,MAAM,CAACd,QAAQ,CAAC;IAC1BC,IAAI,EAAEa,MAAM,CAACb,IAAI,CAAC;IAClBe,IAAI,EAAE,CAAC,CAAC;IACRd,MAAM,EAAEY,MAAM,CAACZ,MAAM,CAAC;IACtBC,IAAI,EAAEW,MAAM,CAACX,IAAI;EACnB,CAAC;EACD,OAAOU,MAAM;;EAEb;AACF;AACA;AACA;AACA;AACA;EACE,SAASC,MAAMA,CAACG,OAAO,EAAE;IACvB,OAAOC,OAAO;IACd;IACA,SAASA,OAAOA,CAACC,IAAI,EAAE;MACrB,OAAOd,eAAe,CAACQ,MAAM,EAAEI,OAAO,EAAEE,IAAI,CAAC;IAC/C;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}