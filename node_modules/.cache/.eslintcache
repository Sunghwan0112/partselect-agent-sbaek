[{"/home/steve/Desktop/Instalily/partselect-chat-agent-sbaek/src/index.js":"1","/home/steve/Desktop/Instalily/partselect-chat-agent-sbaek/src/App.js":"2","/home/steve/Desktop/Instalily/partselect-chat-agent-sbaek/src/reportWebVitals.js":"3","/home/steve/Desktop/Instalily/partselect-chat-agent-sbaek/src/components/ChatWindow.js":"4","/home/steve/Desktop/Instalily/partselect-chat-agent-sbaek/src/api/api.js":"5"},{"size":513,"mtime":1746231486560,"results":"6","hashOfConfig":"7"},{"size":770,"mtime":1746233739895,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1746231486560,"results":"9","hashOfConfig":"7"},{"size":3622,"mtime":1746239956406,"results":"10","hashOfConfig":"7"},{"size":623,"mtime":1746232862649,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"i9junk",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/steve/Desktop/Instalily/partselect-chat-agent-sbaek/src/index.js",[],[],"/home/steve/Desktop/Instalily/partselect-chat-agent-sbaek/src/App.js",[],[],"/home/steve/Desktop/Instalily/partselect-chat-agent-sbaek/src/reportWebVitals.js",[],[],"/home/steve/Desktop/Instalily/partselect-chat-agent-sbaek/src/components/ChatWindow.js",["28"],[],"import React, { useState, useRef, useEffect } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport { getAIMessage } from \"../api/api\";\nimport \"./ChatWindow.css\";\n\nconst initialOptions = [\n  \"Check Order Status\",\n  \"Return an Order\",\n  \"Cancel an Order\",\n  \"Search for a refrigerator part\",\n  \"Search for a dishwasher part\",\n  \"Is this part compatible with my model?\",\n  \"How do I install a replacement part?\"\n];\n\nfunction ChatWindow() {\n  const [messages, setMessages] = useState([\n    {\n      role: \"assistant\",\n      content:\n        \"Hello! I'm here to help with any questions you have about refrigerator or dishwasher parts. Let me know what you need assistance with!\\n\\nIf you're looking for repair help, check out these official repair guides:\\n\\n- [Refrigerator](https://www.partselect.com/Repair/Refrigerator/)\\n- [Dishwasher](https://www.partselect.com/Repair/Dishwasher/)\"\n    }\n  ]);\n  const [input, setInput] = useState(\"\");\n  const [buttonsVisible, setButtonsVisible] = useState(true);\n  const [thinking, setThinking] = useState(false);\n  const [hasInteracted, setHasInteracted] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    if (hasInteracted) {\n      messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSend = async (text) => {\n    const userMessage = { role: \"user\", content: text };\n    setMessages((prev) => [...prev, userMessage]);\n    setHasInteracted(true);\n    if (buttonsVisible) setButtonsVisible(false);\n    setThinking(true);\n\n    const aiResponse = await getAIMessage(text);\n    setMessages((prev) => [...prev, aiResponse]);\n    setInput(\"\");\n    setThinking(false);\n  };\n\n  const handleQuickAction = (actionText) => {\n    handleSend(actionText);\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"messages-container\">\n        {messages.map((msg, idx) => (\n          <div key={idx} className={`${msg.role}-message`}>\n            <ReactMarkdown\n              components={{\n                a: (props) => (\n                  <a href={props.href} target=\"_blank\" rel=\"noopener noreferrer\">\n                    {props.children}\n                  </a>\n                ),\n              }}\n            >\n              {msg.content}\n            </ReactMarkdown>\n          </div>\n        ))}\n\n        {thinking && (\n          <div className=\"assistant-message-container\">\n            <div className=\"assistant-message thinking-placeholder\">\n              <div className=\"robot-thinking\">\n                ðŸ¤–\n                <div className=\"typing-dots\">\n                  <span></span>\n                  <span></span>\n                  <span></span>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <div ref={messagesEndRef} />\n      </div>\n\n      {buttonsVisible && (\n        <div className=\"quick-actions\">\n          {initialOptions.map((text, idx) => (\n            <button key={idx} onClick={() => handleQuickAction(text)}>\n              {text}\n            </button>\n          ))}\n        </div>\n      )}\n\n      <div className=\"input-area\">\n        <input\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onKeyDown={(e) => e.key === \"Enter\" && input.trim() && handleSend(input)}\n          placeholder=\"Type your question...\"\n        />\n        <button onClick={() => handleSend(input)} disabled={!input.trim()}>\n          Send\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default ChatWindow;\n\n","/home/steve/Desktop/Instalily/partselect-chat-agent-sbaek/src/api/api.js",[],[],{"ruleId":"29","severity":1,"message":"30","line":38,"column":6,"nodeType":"31","endLine":38,"endColumn":16,"suggestions":"32"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'scrollToBottom'. Either include it or remove the dependency array.","ArrayExpression",["33"],{"desc":"34","fix":"35"},"Update the dependencies array to be: [messages, scrollToBottom]",{"range":"36","text":"37"},[1350,1360],"[messages, scrollToBottom]"]